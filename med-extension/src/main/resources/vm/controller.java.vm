#set($controllerPackageName="com.yf.web.controller")
package ${controllerPackageName};

import java.util.List;
import cn.hutool.core.util.ObjectUtil;
import org.springframework.security.access.prepost.PreAuthorize;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.yf.common.utils.poi.ExcelExport;
import org.springframework.transaction.annotation.Transactional;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.*;
import javax.annotation.Resource;
import com.yf.common.annotation.Log;
import com.yf.common.enums.BusinessType;
import ${packageName}.domain.${className}.${ClassName};
import ${packageName}.domain.${className}.convert.${ClassName}Convert;
import ${packageName}.domain.${className}.vo.${ClassName}Vo;
import ${packageName}.domain.${className}.vo.${ClassName}ShowVo;
import ${packageName}.service.I${ClassName}Service;


/**
 * @name: ${ClassName}
 * @author： ${author}
 * @classPath: ${packageName}.domain.${ClassName}
 * @date: ${datetime}
 * @Version: 1.0
 * @description: 文件描述:${functionName}控制器
 */
@Slf4j
@RestController
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller {

    @Resource
    private I${ClassName}Service ${className}Service;


    /**
 * 得到  QueryWrapper
 * @param searchParam 查询参数
 * @return  LambdaQueryWrapper<Test>
 */
    LambdaQueryWrapper<${ClassName}>  getQueryWrapper(${ClassName}Vo searchParam){
        LambdaQueryWrapper<${ClassName}> lambdaQueryWrapper = new LambdaQueryWrapper<>();
        #foreach ($column in $columns)
        #if($column.query)
        #if($column.javaField.length() > 2 && $column.javaField.substring(1,2).matches("[A-Z]"))
            #set($AttrName=$column.javaField)
        #else
            #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
        #end
        #if($column.queryType == "LIKE")
        lambdaQueryWrapper.eq(ObjectUtil.isNotEmpty(searchParam.get${AttrName}()),${ClassName}::get${AttrName},searchParam.get${AttrName}());
        #elseif($column.queryType == "EQ")
        lambdaQueryWrapper.like(ObjectUtil.isNotEmpty(searchParam.get${AttrName}()),${ClassName}::get${AttrName},searchParam.get${AttrName}());
        #end
        #end
        #end
        return lambdaQueryWrapper;
    }

    /**
     * 查询${functionName}列表
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:list')")
    @GetMapping("/list")
#if($table.crud || $table.sub)
     Object list(Page<${ClassName}> page,${ClassName}Vo param) {
        return ${ClassName}Convert.INSTANCE.convertPage(${className}Service.page(page, getQueryWrapper(param)));
    }
#elseif($table.tree)
    Object list(Page<${ClassName}> page,${ClassName} ${className})
    {
        return ${ClassName}Convert.INSTANCE.convertPage(${className}Service.page(page, getQueryWrapper(param)));
    }
#end

    /**
     * 导出${functionName}列表
     */
    @ExcelExport
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:export')")
    @Log(title = "${functionName}", businessType = BusinessType.EXPORT)
    @GetMapping("/export")
    Object export(${ClassName}Vo param) {
        return ${ClassName}Convert.INSTANCE.convertList(${className}Service.list(getQueryWrapper(param)));
    }

    /**
     * 获取${functionName}详细信息
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:query')")
    @GetMapping(value = "/{${pkColumn.javaField}}")
    Object getInfo(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField}) {
        return ${className}Service.getById(${pkColumn.javaField});
    }

    /**
     * 新增${functionName}
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:add')")
    @Log(title = "${functionName}", businessType = BusinessType.INSERT)
    @PostMapping
    void add(@RequestBody ${ClassName}ShowVo ${className}) {
        ${className}Service.save(${ClassName}Convert.INSTANCE.toDO(${className}));
    }

    /**
     * 修改${functionName}
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:edit')")
    @Log(title = "${functionName}", businessType = BusinessType.UPDATE)
    @PutMapping
    @Transactional(rollbackFor = Exception.class)
    public void edit(@RequestBody ${ClassName}ShowVo ${className}) {
        ${className}Service.updateById(${ClassName}Convert.INSTANCE.toDO(${className}));
    }

    /**
     * 删除${functionName}
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:remove')")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
    @DeleteMapping("/{${pkColumn.javaField}}")
    @Transactional(rollbackFor = Exception.class)
    public void remove(@PathVariable ${pkColumn.javaType} ${pkColumn.javaField}) {
            ${className}Service.removeById(${pkColumn.javaField});
    }

    /**
     * 删除${functionName}
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:remove')")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
    @DeleteMapping("/batch/{${pkColumn.javaField}s}")
    @Transactional(rollbackFor = Exception.class)
    public void batchRemove(@PathVariable List<${pkColumn.javaType}> ${pkColumn.javaField}s) {
            ${className}Service.removeBatchByIds(${pkColumn.javaField}s);
    }


}
